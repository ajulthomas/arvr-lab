x = "Importance Score",
fill="Importance Score"
) +
theme_minimal()
# extracting the most important categorical features
imp_cat_vars <-  df_imp_score %>%
head(4) %>%
select(col_name) %>%
.[[1]]
print(imp_cat_vars)
ggplot(df, mapping=aes(y=SalePrice, x=Neighborhood, fill=Neighborhood))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Neighborhood",
subtitle = "Plots the variation of SalesPrice for Neighborhood",
y="Sale Price (in USD)",
x="Neighborhoods"
)+
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
df_Yr_Nbhd <- df %>%
select(Neighborhood,YrSold,SalePrice) %>%
group_by(Neighborhood, YrSold) %>%
summarise(med_sl_price = median(SalePrice))
df_Yr_Nbhd
ggplot(df_Yr_Nbhd, aes(x=YrSold, y=med_sl_price, color=Neighborhood))+
geom_line()+
geom_point() +
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "Time Series of SalePrice for Various Suburbs",
x = "Year",
y = "Median Sale Price (in USD)"
) +
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)+
facet_wrap(~Neighborhood, ncol = 5, nrow = 5)
ggplot(df, mapping=aes(y=SalePrice, x=ExterQual, fill=ExterQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material Quality",
subtitle = "Plots the variation of SalesPrice with Exterior Material Quality",
y="Sale Price (in USD)",
x="Exterior Material Quality",
fill="Exterior Material Quality"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=BsmtQual, fill=BsmtQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Basement Quality",
subtitle = "Plots the variation of SalesPrice with Basement Quality",
y="Sale Price (in USD)",
x="Basement Quality",
fill="Basement Quality"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=KitchenQual, fill=KitchenQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Kitchen Quality",
subtitle = "Plots the variation of SalesPrice with Kitchen Quality",
y="Sale Price (in USD)",
x="Kitchen Quality",
fill="Kitchen Quality"
)+
theme_minimal()
modelling_vars <- c(vars_high_cor, imp_cat_vars)
modelling_vars
df_model <- df %>%
select(SalePrice,all_of(modelling_vars))
head(df_model)
# all the important categorical variables identified
imp_cat_vars
# encoding categorical variables
for(cat_var in imp_cat_vars) {
df_model[[cat_var]] <- as.integer(factor(df_model[[cat_var]]))
}
# having a look at the dataframe
head(df_model)
# train test split of data
# for reproducability of results
set.seed(123)
# train-test split
train.samples <- df_model$SalePrice %>% createDataPartition(p=0.8,list=FALSE)
ames_train <- df_model[train.samples,]
ames_test <- df_model[-train.samples,]
# fit control variable specifying 5-fold cross validation
trControl <- trainControl(method = "cv", number = 5)
# setting seed for to reproduce same results
set.seed(123)
# linear model
linear_model <- train(
SalePrice ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model
summary(linear_model)
# predicts
linear_predictions <- predict(linear_model, newdata = ames_test)
# linear_predictions
# performance evaluation metrics
lm_metrics <- data.frame(
RMSE = RMSE(linear_predictions, ames_test$SalePrice),
RSQ = caret::R2(linear_predictions, ames_test$SalePrice),
MAE = MAE(linear_predictions, ames_test$SalePrice),
row.names = c("Linear")
)
lm_metrics
# linear model with log transformation on target variable
linear_model2 <- train(
log(SalePrice) ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model2
summary(linear_model2)
# predicts
lm2_predictions <- predict(linear_model2, newdata = ames_test)
# linear_predictions
# performance evaluation metrics
lm2_metrics <- data.frame(
RMSE = RMSE(lm2_predictions, log(ames_test$SalePrice)),
RSQ = caret::R2(lm2_predictions, log(ames_test$SalePrice)),
MAE = MAE(lm2_predictions, log(ames_test$SalePrice)),
row.names = c("lm2")
)
lm2_metrics
tune <- expand.grid(mtry = c(1:15))
rf_model <- train(
SalePrice ~.,
data = ames_train,
method = "rf",
trControl = trControl,
ntree = 100,
tuneGrid = tune,
importance = TRUE)
rf_model
plot(rf_model)
plot(varImp(rf_model))
rf_predictions <- rf_model %>% predict(ames_test)
rf_metrics <- data.frame(
RMSE = RMSE(rf_predictions, ames_test$SalePrice),
RSQ = caret::R2(rf_predictions, ames_test$SalePrice),
MAE = MAE(rf_predictions, ames_test$SalePrice),
row.names = c("Random Forest")
)
rf_metrics
metrics_summary <- rbind( lm_metrics,lm2_metrics, rf_metrics)
metrics_summary
ggplot(df, mapping=aes(y=SalePrice, x=factor(HouseStyle), fill=factor(HouseStyle)))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice vs HouseStyle",
subtitle = "Plots the relationship between SalesPrice versus HouseStyle",
y="Sale Price (in USD)",
x="Style of Dwelling"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=factor(HouseStyle), fill=factor(HouseStyle)))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice vs HouseStyle",
subtitle = "Plots the relationship between SalesPrice versus HouseStyle",
y="Sale Price (in USD)",
x="Style of Dwelling",
fill="Style of Dwelling",
)+
theme_minimal()
df %>%
select(Neighborhood, SalePrice) %>%
group_by(Neighborhood) %>%
summarise(med_sl_price = median(SalePrice))
df %>%
select(Neighborhood, SalePrice) %>%
group_by(Neighborhood) %>%
summarise(med_sl_price = median(SalePrice)) %>%
arrange(desc(med_sl_price))
ggplot(df, mapping=aes(y=SalePrice, x=Exterior1st, fill=Exterior1st))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material",
subtitle = "Plots the variation of SalesPrice with Exterior Material",
y="Sale Price (in USD)",
x="Exterior Material",
fill="Exterior Material"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=Exterior1st, fill=Exterior1st))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material",
subtitle = "Plots the variation of SalesPrice with Exterior Material",
y="Sale Price (in USD)",
x="Exterior Material",
fill="Exterior Material"
)+
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
df %>%
group_by(Exterior1st) %>%
summarise(med_sale_price=median(SalePrice))
df %>%
group_by(Exterior1st) %>%
summarise(med_sale_price=median(SalePrice)) %>%
arrange(desc(med_sale_price))
plot(linear_model, 1)
# fit control variable specifying 5-fold cross validation
trControl <- trainControl(method = "cv", number = 5)
# setting seed for to reproduce same results
set.seed(123)
# linear model
linear_model <- train(
SalePrice ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model
summary(linear_model)
plot(linear_model, 1)
plot(linear_model)
plot(linear_model$results)
geom_point(mapping = aes(x=df$SalePrice, y=linear_predictions))
plot(df$SalePrice, linear_predictions)
plot(ames_test$SalePrice, linear_predictions)
metrics_summary <- rbind( lm_metrics,lm2_metrics, rf_metrics)
metrics_summary
print(metrics_summary)
print(metrics_summary)
setwd("D:/workspace/ar-vr-lab")
cat('014')
cat('\014')
installed.packages("plot3D")
install.packages("plot3D")
install.packages("threejs")
# load dataset
data("iris")
# load dataset
data("iris")
# explore dataset
View(iris)
# load 3D plots
library("plot3D")
?scatter3D
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"))
source("D:/workspace/ar-vr-lab/week_2_lab/exercise_1.R", echo=TRUE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 30, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 60, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = -30, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = -60, phi = 0)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = -60, phi = 30)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = -80, phi = 30)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = -80, phi = 60)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 90, phi = 60)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = 60)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = -60)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = -60, colkey = False)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = 0, colkey = False)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 0, phi = 0, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 30, phi = 30, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 20, phi = 30, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 20, phi = 10, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 20, phi = -10, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 60, phi = -10, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 50, phi = -10, colkey = FALSE)
scatter3D(x,y,z, clab = c("Sepal", "Width (cm)"), theta = 45, phi = -10, colkey = FALSE)
scatter3D(x,y,z, colkey = FALSE)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=19, cex=0.9)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=19, cex=0.1)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=19, cex=1)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=19, cex=10)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=19, cex=0.8)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=20, cex=0.8)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=100, cex=0.8)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=110, cex=0.8)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=50, cex=0.8)
scatter3D(x,y,z, colvar = FALSE, col="blue", pch=10, cex=0.8)
scatter3D(x, y, z, bty = "f", colkey = FALSE, main="bty='f'")
scatter3D(x, y, z, bty="g", colkey = FALSE, main="bty='g", ticktype="detailed" )
scatter3D(x, y, z, bty = "f", colkey = FALSE, main="bty='f'")
scatter3D(x,y,z, colkey = FALSE, ticktype="detailed")
scatter3D(x, y, z, bty="g", colkey = FALSE, main="bty='g", ticktype="detailed" )
scatter3D(x, y, z, pch =18, bty="u", main="bty='u'", colkey = FALSE, col.panel = "royalblue", expand=0.4, col.grid="linen")
scatter3D(x, y, z, pch =17, bty="u", main="bty='u'", colkey = FALSE, col.panel = "royalblue", expand=0.4, col.grid="linen")
# load threejs library
library("threejs")
source("D:/workspace/ar-vr-lab/week_2_lab/exercise_2.R", echo=TRUE)
# plotting using threeJS
scatterplot3js(x,y,z, color=rainbow(length(z)))
scatterplot3js(x,y,z, color=heat.colors(length(z)))
N = length(levels(iris$Species))
scatterplot3js(x,y,z, size =0.6, color = rainbow(N)[iris$Species])
scatterplot3js(x,y,z, size =0.6, color = rainbow(N)[iris$Species])
scatterplot3js(x,y,z, size =0.3, color = rainbow(N)[iris$Species])
scatterplot3js(x,y,z, size =0.5, color = rainbow(N)[iris$Species])
scatterplot3js(x,y,z, pch=0, color = rainbow(length(z)))
scatterplot3js(x,y,z, pch=0.4, color = rainbow(length(z)))
scatterplot3js(x,y,z, pch='x', color = rainbow(length(z)))
scatterplot3js(x,y,z, pch='x', size=0.3 color = rainbow(length(z)))
scatterplot3js(x,y,z, pch='x', size=0.3, color = rainbow(length(z)))
# load data
data(ego)
# load three js
library("threejs")
graphjs(ego, bg="black")
install.packages("maps")
# load data
data(world.cities, package = "maps")
# load data
data(world.cities, package = "maps")
cities <- world.cities[order(world.cities$pop, decreasing = TRUE)[1:500],]
value <- 100*cities$pop/max(cities$pop)
# plot using globejs
globejs(
bg="white",
lat=cities$lat,
long = cities$long,
values=value,
rotationlat = -0.34,
rotationlong = -0.38,
fov=30
)
# plot using globejs
globejs(
bg="#ababab",
lat=cities$lat,
long = cities$long,
values=value,
rotationlat = -0.34,
rotationlong = -0.38,
fov=30
)
# plot using globejs
globejs(
bg="#cacaca",
lat=cities$lat,
long = cities$long,
values=value,
rotationlat = -0.34,
rotationlong = -0.38,
fov=30
)
cat("\014")
install.packages("rgl")
# load library
library("rgl")
# plot the data
plot3d(x,y,z)
source("D:/workspace/ar-vr-lab/week_2_lab/excercise_4.R", echo=TRUE)
# plot the data
plot3d(x,y,z)
# plot the data
plot3d(x,y,z)
# plot the data
plot3d(x,y,z, size = 7, col=as.numeric(iris$Species))
plot3d(x,y,z, size = 2, col=as.numeric(iris$Species))
plot3d(
x,y,z,
size = 2,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width"
)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width"
)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width",
radius = 0.2
)
play3d(spin3d(axis = c(0,1,0), rpm = 20), duration=10)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width"
)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width",
radius = 0.2
)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width"
)
play3d(spin3d(axis = c(0,1,0), rpm = 20), duration=10)
movie3d(
movie="3dAnimatedScatterplot",
spin3d(axis = c(0,1,0), rpm=7),
duration = 5,
dir=getwd(),
type="gif",
clean=TRUE
)
install.packages("magick")
