scale_color_manual(name = "Variable",
values = c(TotalBsmtSF = "#EF3E36", X1stFlrSF = "#17BEBB")) +
scale_y_continuous(
breaks = seq(from = 0, to = 800000, by = 100000),
labels = c("0", "100,000", "200,000", "300,000", "400,000", "500,000", "600,000", "700,000", "800,000")
) +
labs(
title = "SalePrice vs TotalBsmtSF and X1stFlrSF",
subtitle = "Relationship between SalesPrice versus Size of Basement and First Floor (in square feet)",
y = "Sale Price (in USD)",
x = "Area (in square feet)"
) +
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=YearBuilt))+
geom_point(color="#F3A712")+
geom_smooth(method = lm, color="#E4572E")+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
scale_x_continuous(
breaks = seq(
from=min(df$YearBuilt),
to=max(df$YearBuilt),
by=10
)
)+
labs(
title = "SalePrice vs YearBuilt",
subtitle = "Plots the relationship between SalesPrice versus Year Built",
y="Sale Price (in USD)",
x="Year Built"
)+
theme_minimal()
df <- df %>%
mutate(age = YrSold -YearBuilt)
print(
paste(
"The correlation between SalePrice and age is",
cor(df %>% select(SalePrice, age))['SalePrice', 'age']
)
)
ggplot(df, mapping=aes(y=SalePrice, x=age))+
geom_point(color="#A8C686")+
geom_smooth(method = lm, color="#29335C")+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
scale_x_continuous(
breaks = seq(
from=0,
to=max(df$age),
by=10
)
)+
labs(
title = "SalePrice vs Age",
subtitle = "Plots the relationship between SalesPrice and age of house/building",
y="Sale Price (in USD)",
x="Age (in years)"
)+
theme_minimal()
# extracting all the categorical variables
categorical_vars <- names(df[sapply(df, is.factor)])
# Fit Random Forest model
rf_model <- randomForest(
SalePrice ~ .,
data = df %>% select(all_of(c("SalePrice", categorical_vars))),
importance=TRUE
)
# Get feature importance scores
importance_scores <- importance(rf_model)
# Print feature importance scores
print(importance_scores)
# Plot feature importance
# varImpPlot(rf_model)
df_imp_score <- data.frame(
col_name=rownames(importance_scores),
imp_score=importance_scores[,1]
) %>%
arrange(desc(imp_score))
ggplot(df_imp_score, mapping=aes(y=reorder(col_name, imp_score), x=imp_score, fill=imp_score))+
geom_bar(stat = "identity")+
labs(
title = "Feature Importance",
y = "Categorical Features",
x = "Importance Score",
fill="Importance Score"
) +
theme_minimal()
# extracting the most important categorical features
imp_cat_vars <-  df_imp_score %>%
head(4) %>%
select(col_name) %>%
.[[1]]
print(imp_cat_vars)
ggplot(df, mapping=aes(y=SalePrice, x=Neighborhood, fill=Neighborhood))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Neighborhood",
subtitle = "Plots the variation of SalesPrice for Neighborhood",
y="Sale Price (in USD)",
x="Neighborhoods"
)+
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
df_Yr_Nbhd <- df %>%
select(Neighborhood,YrSold,SalePrice) %>%
group_by(Neighborhood, YrSold) %>%
summarise(med_sl_price = median(SalePrice))
df_Yr_Nbhd
ggplot(df_Yr_Nbhd, aes(x=YrSold, y=med_sl_price, color=Neighborhood))+
geom_line()+
geom_point() +
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "Time Series of SalePrice for Various Suburbs",
x = "Year",
y = "Median Sale Price (in USD)"
) +
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)+
facet_wrap(~Neighborhood, ncol = 5, nrow = 5)
ggplot(df, mapping=aes(y=SalePrice, x=ExterQual, fill=ExterQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material Quality",
subtitle = "Plots the variation of SalesPrice with Exterior Material Quality",
y="Sale Price (in USD)",
x="Exterior Material Quality",
fill="Exterior Material Quality"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=BsmtQual, fill=BsmtQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Basement Quality",
subtitle = "Plots the variation of SalesPrice with Basement Quality",
y="Sale Price (in USD)",
x="Basement Quality",
fill="Basement Quality"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=KitchenQual, fill=KitchenQual))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Kitchen Quality",
subtitle = "Plots the variation of SalesPrice with Kitchen Quality",
y="Sale Price (in USD)",
x="Kitchen Quality",
fill="Kitchen Quality"
)+
theme_minimal()
modelling_vars <- c(vars_high_cor, imp_cat_vars)
modelling_vars
df_model <- df %>%
select(SalePrice,all_of(modelling_vars))
head(df_model)
# all the important categorical variables identified
imp_cat_vars
# encoding categorical variables
for(cat_var in imp_cat_vars) {
df_model[[cat_var]] <- as.integer(factor(df_model[[cat_var]]))
}
# having a look at the dataframe
head(df_model)
# train test split of data
# for reproducability of results
set.seed(123)
# train-test split
train.samples <- df_model$SalePrice %>% createDataPartition(p=0.8,list=FALSE)
ames_train <- df_model[train.samples,]
ames_test <- df_model[-train.samples,]
# fit control variable specifying 5-fold cross validation
trControl <- trainControl(method = "cv", number = 5)
# setting seed for to reproduce same results
set.seed(123)
# linear model
linear_model <- train(
SalePrice ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model
summary(linear_model)
# predicts
linear_predictions <- predict(linear_model, newdata = ames_test)
# linear_predictions
# performance evaluation metrics
lm_metrics <- data.frame(
RMSE = RMSE(linear_predictions, ames_test$SalePrice),
RSQ = caret::R2(linear_predictions, ames_test$SalePrice),
MAE = MAE(linear_predictions, ames_test$SalePrice),
row.names = c("Linear")
)
lm_metrics
# linear model with log transformation on target variable
linear_model2 <- train(
log(SalePrice) ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model2
summary(linear_model2)
# predicts
lm2_predictions <- predict(linear_model2, newdata = ames_test)
# linear_predictions
# performance evaluation metrics
lm2_metrics <- data.frame(
RMSE = RMSE(lm2_predictions, log(ames_test$SalePrice)),
RSQ = caret::R2(lm2_predictions, log(ames_test$SalePrice)),
MAE = MAE(lm2_predictions, log(ames_test$SalePrice)),
row.names = c("lm2")
)
lm2_metrics
tune <- expand.grid(mtry = c(1:15))
rf_model <- train(
SalePrice ~.,
data = ames_train,
method = "rf",
trControl = trControl,
ntree = 100,
tuneGrid = tune,
importance = TRUE)
rf_model
plot(rf_model)
plot(varImp(rf_model))
rf_predictions <- rf_model %>% predict(ames_test)
rf_metrics <- data.frame(
RMSE = RMSE(rf_predictions, ames_test$SalePrice),
RSQ = caret::R2(rf_predictions, ames_test$SalePrice),
MAE = MAE(rf_predictions, ames_test$SalePrice),
row.names = c("Random Forest")
)
rf_metrics
metrics_summary <- rbind( lm_metrics,lm2_metrics, rf_metrics)
metrics_summary
ggplot(df, mapping=aes(y=SalePrice, x=factor(HouseStyle), fill=factor(HouseStyle)))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice vs HouseStyle",
subtitle = "Plots the relationship between SalesPrice versus HouseStyle",
y="Sale Price (in USD)",
x="Style of Dwelling"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=factor(HouseStyle), fill=factor(HouseStyle)))+
geom_boxplot()+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice vs HouseStyle",
subtitle = "Plots the relationship between SalesPrice versus HouseStyle",
y="Sale Price (in USD)",
x="Style of Dwelling",
fill="Style of Dwelling",
)+
theme_minimal()
df %>%
select(Neighborhood, SalePrice) %>%
group_by(Neighborhood) %>%
summarise(med_sl_price = median(SalePrice))
df %>%
select(Neighborhood, SalePrice) %>%
group_by(Neighborhood) %>%
summarise(med_sl_price = median(SalePrice)) %>%
arrange(desc(med_sl_price))
ggplot(df, mapping=aes(y=SalePrice, x=Exterior1st, fill=Exterior1st))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material",
subtitle = "Plots the variation of SalesPrice with Exterior Material",
y="Sale Price (in USD)",
x="Exterior Material",
fill="Exterior Material"
)+
theme_minimal()
ggplot(df, mapping=aes(y=SalePrice, x=Exterior1st, fill=Exterior1st))+
geom_boxplot()+
geom_jitter(alpha=0.1)+
scale_y_continuous(
breaks = seq(
from=0,
to=800000,
by=100000
),
labels = c("0", "100,000", "200,000", "300,000", "400,000","500,000", "600,000", "700,000", "800,000")
)+
labs(
title = "SalePrice Vs Exterior Material",
subtitle = "Plots the variation of SalesPrice with Exterior Material",
y="Sale Price (in USD)",
x="Exterior Material",
fill="Exterior Material"
)+
theme_minimal()+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
df %>%
group_by(Exterior1st) %>%
summarise(med_sale_price=median(SalePrice))
df %>%
group_by(Exterior1st) %>%
summarise(med_sale_price=median(SalePrice)) %>%
arrange(desc(med_sale_price))
plot(linear_model, 1)
# fit control variable specifying 5-fold cross validation
trControl <- trainControl(method = "cv", number = 5)
# setting seed for to reproduce same results
set.seed(123)
# linear model
linear_model <- train(
SalePrice ~ .,
data = ames_train,
method="lm",
trControl=trControl,
tuneLength = 20
)
# summary of model
linear_model
summary(linear_model)
plot(linear_model, 1)
plot(linear_model)
plot(linear_model$results)
geom_point(mapping = aes(x=df$SalePrice, y=linear_predictions))
plot(df$SalePrice, linear_predictions)
plot(ames_test$SalePrice, linear_predictions)
metrics_summary <- rbind( lm_metrics,lm2_metrics, rf_metrics)
metrics_summary
print(metrics_summary)
print(metrics_summary)
source("D:/workspace/ar-vr-lab/week_2/excercise_4.R", echo=TRUE)
use_warnings()
movie3d(
movie="3dAnimatedScatterplot",
spin3d(axis = c(0,1,0), rpm=7),
duration = 5,
dir=getwd(),
type="gif",
clean=TRUE
)
getwd()
cat("\014")
setwd("D:/workspace/ar-vr-lab/week_2")
# load library
library("rgl")
# load dataset
data("iris")
# create vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
# plot the data
plot3d(x,y,z, size = 7, col=as.numeric(iris$Species))
plot3d(x,y,z, size = 2, col=as.numeric(iris$Species))
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width"
)
plot3d(
x,y,z,
col=as.numeric(iris$Species),
type="s",
xlab="Sepal Length",
ylab="Petal Length",
zlab = "Sepal Width",
radius = 0.2
)
play3d(spin3d(axis = c(0,1,0), rpm = 20), duration=10)
movie3d(
movie="3dAnimatedScatterplot",
spin3d(axis = c(0,1,0), rpm=7),
duration = 5,
dir=getwd(),
type="gif",
clean=TRUE
)
# load package
library(plotly)
# install packages
install.packages("plotly")
# load dataset
data("iris")
# create vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
# scatter plot
plot_ly(iris, x=~x, y=~y, z=~z)
# load package
library(plotly)
# load dataset
data("iris")
# create vectors for plots
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
# scatter plot
plot_ly(iris, x=~x, y=~y, z=~z)
# you can also pass the names of the variables
plot_ly(iris,
x=~Sepal.Length,
y=~Sepal.Width,
z=~Petal.Length)
# add colour
plot_ly(iris, x=~x, y=~y, z=~z, color = ~Species)
# scatter plot
p <- plot_ly(iris, x=~x, y=~y, z=~z)
p <- add_markers(p, color = ~Species)
p
# add labels to the plot
variables <-names(iris)
layout(p, scene = list(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
zaxis = list(title = variables[3])))
p <- plot_ly(z = volcano, type = "surface")
p
install.packages("htmlwidgets")
library(htmlwidgets)
install.packages("htmlwidgets")
library(htmlwidgets)
install.packages("htmlwidgets")
saveWidget(p, file=paste0( getwd(), "/3dSurface.html"))
